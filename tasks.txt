BACKEND:

21.02.2025

Task-1:

1. Implement Employee class with following specification 
        String firstName
        String lastName 
        Date    dateOfBirth
        double        experience

2. Implement MyCollection class with the following specification
        Array of 300 entries of Employee class
        writeCounter
        readCounter
        The following methods to be syncronized 
        add(Employee) -> new element should be added at writeCounter, writeCounter should be increment after every insert 
        Employee get() -> element should be readCounter, readCounter should be incremented after every read operation 

3. Define a interface MyFileHandler with following methods
        i. read
        ii. write

4. Declare CSVFileHandler, XMLFileHandler, JsonFileHandler classes that implements MyFileHandler 
        i. CSVFileHandler should have ability to read and write data in CSV
        ii. XMLFileHandler should have ability to read and write data in XML
        iii. JsonFileHandler should have ability to read and write data in JSON

5. Generate three data files and each file containing 100 records. File one should be CSV format, file should be in XML format and file three should be in JSON format

6. Develop a controller class MyController with the following logic
        i. Create three threads and allocate one threads each for reading data from CSV, XML and JSON  
        ii. Each thread reads record by record and insert into MyCollection class 
        iii. Main thread that has created three threads should wait for all threads to finish

6. Once the read finishes, print the count of elements from MyCollection, it should be 300 and write counter should be properly updated to 300 

7. Create three threads to write data from MyCollection with the following specifications 
        i. Each thread reading one record from MyCollection, read method should return the value and increment the counter
        ii. Thread 1 should write record in CSV
        iii. Thread 2 should write records in XML
        iv. Thread 3 should write records in JSON 
        v. Once record is wirtten to the file thread should seek next record from MyCollection 
        vi. Each thread should finish reading after 100 records 
        vii. Files should not have duplicate records and should not have more than 100 records

---------------------------------------------------------

Task-2:

Given a list of strings, write a stream operation to convert all strings to lowercase.

Filter a list of integers to keep only the odd numbers.

Find the product of all integers in a list using streams.

Check if any string in a list starts with the letter "a".

Find the shortest string in a list of strings.

Calculate the average length of all strings in a list.

Convert a list of strings to a set of unique strings.

Group a list of words by their first letter.

Count the number of occurrences of each word in a list of strings.

Given a list of doubles, find the maximum value.

Transform a list of integers into a list of their cubes.

Concatenate all strings in a list into a single string, separated by spaces.

Find the third largest number in a list of integers (handle duplicates).

Check if all elements in a list are greater than 10.

Partition a list of integers into two groups: positive and negative numbers.

Calculate the sum of the squares of all even numbers in a list.

Remove all duplicate words from a list of strings while preserving the original order.

Find the total number of characters in all strings in a list.

Skip the first 5 elements and take the next 3 elements from a list of integers.

Given a list of Person objects (with name and age properties), create a list containing only the names of people older than 25.

---------------------------------------------------------

24.02.2025

Task:

The university wants to design a database schema to manage the following data:
 
	1.	Departments – Different academic departments in the university, such as Computer Science, Mathematics, Physics, etc.
	2.	Students – Students enrolled at the university. Each student is associated with a single department.
	3.	Courses – Courses offered by each department.
	4.	Address – The address of each student.

Assignment Questions:

1. Save a student in the database with proper foreign key relationships (existing department and address). write an endpoint to fetch using studentId  and it should return all the details related to Department & Address.
2. Create a Student with Existing Address & Department
3. Get Total Student Count in a Department -: Create an API to return the total number of students in a given department (departmentID should be passed from path variable or requestParam). Log an error if the department is not found.
4. Get Students Living in a Particular State -: Implement an API to fetch all students residing in a given state (passed as a path variable).

---------------------------------------------------------

25.02.2025

Queries:

db.employee.insert({"firstName":"Trainer", "lastName":"Really", "middleName":"Hate this guy", "dateOfBirth":"2020/Jan/05", "title":"General", "departmentName":"All", "experience":0 })
db.employee.find({}) ;
db.employee.findOne({}) ;
db.employee.find({"firstName" : "Trainer"}) ;
db.employee.find({"firstName" : "Trainer"}).count() ;
db.employee.count();
db.employee.update({"firstName" : "Trainer"},{$set:{"middleName":"Totally hate this guy","lastName":"Absoutely"}});
db.employee.remove({"firstName" : "Trainer"}) ;
db.employee.remove({}) ;
db.employee.insertMany([{"firstName":"Trainer 1", "lastName":"Really", "middleName":"Hate this guy", "dateOfBirth":"2020/Jan/05", "title":"General", "departmentName":"Dept 1", "experience":10 }, {"firstName":"Trainer 2", "lastName":"Good", "middleName":"Understanding", "dateOfBirth":"2019/Jan/05", "title":"General", "departmentName":"Dept 2", "experience":9 }, {"firstName":"Trainer 3", "lastName":"Awesome", "middleName":"Nice", "dateOfBirth":"2019/Jan/05", "title":"General", "departmentName":"Dept 2", "experience":8 } ])
db.employee.find({}).limit(1) ;
db.employee.find( {"firstName" : /Trainer/} ) ;
db.employee.find( {"firstName" : /trainer/i} ) ;
db.employee.find( {"firstName" : /^Train/} ) ;
db.employee.find( {"firstName" : /.*1/} ) ;
db.employee.find( {"firstName" : /^Train.*2/} ) ;
db.employee.find( {"dateOfBirth" : {$gt: "2020/Jan/01"}} ) ;
db.employee.find( {"firstName" : {$in: ["Trainer 1","Trainer 2"]}} ) ;
db.employee.find( {$and: [{"firstName" : /Trainer/}, {"lastName" : "Good"}]} ) ;
db.employee.find({}).sort({"firstName":1}); 
db.employee.find({}).sort({"firstName":-1}); 
db.employee.aggregate([{$group : {_id : "$departmentName", num_tutorial : {$sum : 1}, max_exp : {$max:"$experience"}}}])
db.employee.distinct("firstName") ;
db.employee.distinct("firstName") ;

---------------------------------------------------------

25.02.2025

Task:

Student Learning Management System For An Organization 
1. Ability to register/de-register student to platform 
a) Add Student Details (student id, student name, student dob) 
b) Edit Student Details 
c) Delete Student Details 

2. Ability to register/de-register instructor to platform 
a) Add Instructor Details (instructor id, instructor name, INSTRUCTOR dob, COURSE ID) 
b) Edit Instructor Details 
c) Delete Instructor 

3. Ability to register/de-register course to platform 
a) Add Course (courseId, course name, course fee, course instructor) 
b) Delete Course 

4. Course Registration/Withdraw for Student 
a) Student can opt for multiple courses (one student id can have multiple courses) 
b) Delete course at anytime by organisation 

4. Course Registration/Withdraw for Instructor 
a) Instructor can register only for one course 

5. As a student, I must be able to 
a) See the progress of each course (TO_DO | IN_PROGRESS | COMPLETED) 
b) See the student details c) Enroll for a new course d) Withdraw any course 

6. As an organization, I must be able to 
a) View count of student enrolled in the organisation 
b) View count of student enrolled in each course 
c) View details of instructor for each course 
d) View the count of instructors in organization 
e) All the student details, course details, instructor details by COURSE_ID 
f) All the student details by COURSE STATUS (TO_DO, IN_PROGRESS, COMPLETED) 

7) As an instructor, 
a) Course Update Status for student 

1. Implement an application that takes care of Postgres DB interactions & Buisness logic via valid endpoints and logging via @Slf4j Also implement Custom Exception Handler using @RestControllerAdvice Implement redis caching and clear/update the cache incase of edits/update/delete operations 

2. Implement an application that takes care of Mongo DB interactions & Buisness logic via valid endpoints and logging @Slf4j Also implement Custom Exception Handler using @RestControllerAdvice Implement redis caching and clear/update the cache incase of edits/update/delete operations 


3. implement in memory caching and redis caching in either of the service as you prefer Implementing both is necessary   

---------------------------------------------------------

27.02.2025

Task:

Implement feign on the above Student LMS such that if mongo == true, call mongo micro service or else call postgre micro service


---------------------------------------------------------
---------------------------------------------------------


FRONTEND:

28.02.2025

Task:

Create a portfolio webpage.

---------------------------------------------------------

03.03.2025

Task:

1. Function Declaration: Create a function named findMax that takes five numbers as a parameter and returns the largest number
2. Function Expression: Define a function expression named sum that takes five numbers and returns the sum of all the numbers
3. Arrow Function: Create a function to multiply 2 numbers

---------------------------------------------------------

04.03.2025

Javascript Task:

Create a web application using HTML, CSS, and vanilla JavaScript that allows users to browse through meal categories, search for specific categories, view meals within a category, and see detailed information about each meal
Home Page
->List All Meal Categories as Grid view with associated info like thumbnail, name etc.
-> Implement a search bar that allows users to search for meal categories by name.
Category Page
->When a user clicks on a meal category from the home page, navigate to a new page that lists all the meals available in that category.
->When a user clicks on a specific meal, display a popup that shows:
-The recipe for the meal.
-A YouTube link to a video related to the recipe.
-Other relevant details about the meal

Use these APIs for this assignment:
APIs to be used:
To list all categories: www.themealdb.com/api/json/v1/1/categories.php
To get meal by category: www.themealdb.com/api/json/v1/1/filter.php?c={category name}
To get recipe of each meal: https://www.themealdb.com/api/json/v1/1/search.php?s={meal name}

https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch

https://jsonplaceholder.typicode.com/

---------------------------------------------------------

04.03.2025

Vue.js Task:

Task Description:
 
Create a Product Card component in Vue.js where:
 
1. The product name, price, and image are passed as props.
 
 
2. A button toggles between "Add to Cart" and "Remove from Cart" using v-if.
 
 
3. A discount price is displayed, calculated using a computed property (10% off the original price).
 
 
4. A watcher observes the quantity and logs a message when it changes.
 
 
5. Use v-bind to dynamically bind the image source.
 
 
6. Use v-on to handle button clicks.

------

Expected Output:
 
A product card with:
✅ Product Name & Price displayed
✅ Image of the Product
✅ Discounted Price (10% off)
✅ "Add to Cart" / "Remove from Cart" Button
✅ Quantity selector (logs changes using a watcher)

------

Go through: 
Arrow function vs Normal function -> this context?
What is bundlers?
All Event listeners in JS
Props and Emits
LifeCycle hooks
Event Loop in javascript: https://www.youtube.com/watch?v=eiC58R16hb8&t=550s
Promises, async-await, Fetch api calls.

------

Go through the essentials section for options api and later on composition:
 
https://vuejs.org/guide/introduction.html